// Generated by Prisma - TypeScript Enums
export enum ReportStatus {
  DRAFT = "DRAFT",
  PUBLISHED = "PUBLISHED",
  ARCHIVED = "ARCHIVED",
  UNDER_REVIEW = "UNDER_REVIEW"
}

export enum ReportType {
  GENERAL = "GENERAL",
  SECURITY_ANALYSIS = "SECURITY_ANALYSIS",
  PROGRAM_REVIEW = "PROGRAM_REVIEW",
  SUBMISSION_REPORT = "SUBMISSION_REPORT",
  AUDIT_REPORT = "AUDIT_REPORT",
  COMPLIANCE_REPORT = "COMPLIANCE_REPORT"
}

export enum Priority {
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  URGENT = "URGENT"
}

// Additional TypeScript interfaces needed by your controller
export interface CreateReportDTO {
  title: string;
  description: string;
  content: string;
  status?: ReportStatus;
  type?: ReportType;
  priority?: Priority;
  programId?: string;
  submissionId?: string;
  tags?: string[];
  isPublic?: boolean;
  metadata?: Record<string, any>;
  attachments?: string[];

}

export interface UpdateReportDTO {
  title?: string;
  description?: string;
  content?: string;
  status?: ReportStatus;
  type?: ReportType;
  priority?: Priority;
  programId?: string;
  submissionId?: string;
  tags?: string[];
  isPublic?: boolean;
  metadata?: Record<string, any>;
}

export interface ReportQueryParams {
  page?: string;
  limit?: string;
  status?: ReportStatus;
  type?: ReportType;
  priority?: Priority;
  search?: string;
  tags?: string;
  isPublic?: string;
  programId?: string;
  submissionId?: string;
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: string;
}

export interface ReportWithAuthor {
  id: string;
  title: string;
  description: string;
  content: string;
  status: ReportStatus;
  type: ReportType;
  priority: Priority;
  authorId: string;
  authorEmail: string;
  authorName: string;
  programId?: string;
  submissionId?: string;
  tags: string[];
  isPublic: boolean;
  metadata: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
  author?: User;
  collaborators?: any[];
  comments?: any[];
  childReports?: any[];
}

export interface ReportWithRelations extends ReportWithAuthor {
  versions?: any[];
  parentReport?: {
    id: string;
    title: string;
  };
}

export interface PaginationResponse<T> {
  data: T[];
  pagination: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    itemsPerPage: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}
